#+title: rings

* TODO Introduction

The =rings= module implements an unusual nested ring structure. As far as I know, it isn't well known in computer science, and may not even have a name, although it is a specific instance of a /strange loop/. I tend to call it a /chandelier/ or /ring tree/ when describing its shape, or a /jumptree/ when describing its function.

Strictly speaking, a jumptree is a cyclic graph and therefore is not actually a tree, but it is a well-behaved graph that can be used like a tree.

Its topology is described by the following rules:

  - the root of the tree is replaced with a *hub*, which is like the root of a tree in every way /except/ that it has a special parent node called a *mirror node*, (which we will get to in  moment).
  - each node forms a circular doubly-linked list (or *ring*) with its siblings
  - each ring has exactly one *clasp node*, which serves as a sentinel value when looping.
  - it follows from the above four rules that the hub forms a ring with itself and therefore must be a clasp.
  - every leaf in the tree has a unique mirror node for its child
  - every mirror node has a unique leaf node for a parent
  - leaf nodes and mirror nodes share a one-to-one relationship.
  - mirror nodes are arranged in a special ring called the *rim*.
  - all siblings share the same parent, /except/ for mirror nodes.
  - the child of each mirror nodes is the hub.
  - the child node of a clasp may be any non-mirror node.
  - by default, the child of a clasp is the clasp itself

There are some interesting implications to these rules:

  - It is possible to reach a parent node by moving /downward/ through the tree until you reach the rim, then passing "through the mirror" to the hub, and walking back down to the parent node.
  - Each node is connected to exactly four edges
  - There are no null pointers involved.

The jumptree is well suited for situations where you need to need to traverse a tree in arbitrary directions.

* About the implementation

Since all siblings share a parent, only clasp nodes actually need a parent pointer. You can find the parent of any node simply by walking the ring of siblings until you reach the clasp.
* Types of Node
** =GNode<T>= is just an abstract ring member.
#+name: GNode
#+begin_src pascal
  { GNode : link class with .nextLink, .prevLink }
  type GNode<T> = class
    public
      nextLink, prevLink : GNode<T>;
      constructor Create;
      function Length : cardinal; virtual;
    end;
#+end_src

** =GCellNode<T>= contains a value.
#+name: GCellNode
#+begin_src pascal
  type GCellNode<T> = class( GNode<T> )
    protected
      _val : t;
      procedure _set( v : T );
      function _get : T;
    public
      property value : T read _get write _set;
      constructor Create( v : T );
      function Length : cardinal; override;
      function IsClasp : boolean; virtual;
    end;
#+end_src

** =GClaspNode<T>= serves as a sentinel value in the ring.
#+name: GClaspNode
#+begin_src pascal
  { list.TClaspNode : a special node that joins the ends of the list }
  { It's only a cell node because that made the implementation of
    the cursor simpler. Probably there's a better design involving
    nterfaces, though. }
  //  TODO : refactor the node class hierarchy
  type GClaspNode<T> = class( GCellNode<T> )
    public
      parent : GNode<T>;
      constructor Create;
      function Length : cardinal; override;
      function IsClasp : boolean; override;
    end;
#+end_src

* =IRingCursor<T>= interface for ring cursors
This is partially to break circular dependencies, and also partially because cursors are fairly disposable and using the interface allows them to be refcounted and automatically garbage collected.

#+name: IRingCursor
#+begin_src pascal
  type IRingCursor<T> = interface
    procedure Reset;
    procedure ToTop;
    procedure ToEnd;
    function AtTop : boolean;
    function AtEnd : boolean;
    function AtClasp : boolean;
    procedure MoveTo( other : IRingCursor<T> ); overload;
    procedure MoveTo( position : cardinal ); overload;
    function Next( out t : T ) : boolean;
    function Prev( out t : T ) : boolean;
    procedure InjectPrev( const val : T );
    procedure InjectNext( const val : T );
    procedure DeleteNext;
    function GetValue : T;
    procedure SetValue( v : T );
    function GetIndex : cardinal;
    function MoveNext : boolean;
    function MovePrev : boolean;
    property value : T read GetValue write SetValue;
    property index : cardinal read GetIndex;
    property current  : T read GetValue;
  end;
#+end_src
* =GRing<T>.TCursor= walks the structure

As an alternative to looking up the parent nodes, if you started at the hub and are walking downward, you can simply maintain a stack of parent nodes. This module provides a =GRing<T>.TCursor= for maintaining such a stack.

#+name: GCursor
#+begin_src pascal
  { tracks a position in the list, even through Inserts/deletes }
  type TCursor = class (TInterfacedObject, IRingCursor<T>)
    private type
      GNodeT     = GNode<T>;
      GNodeStack = GStack<GNodeT>;
    protected
      _ring  : GRing<T>; // the main list
      _cell  : GCellNode<T>;
      _idx  : cardinal;
      _path : GNodeStack;
      function NextCell : GCellNode<T>; virtual;
      function PrevCell : GCellNode<T>; virtual;
    public
      constructor Create( lis : GRing<T> );
      destructor Destroy; override;
      procedure Reset;
      procedure ToTop;
      procedure ToEnd;
      function AtTop : boolean;
      function AtEnd : boolean;
      function AtClasp : boolean;
      procedure MoveTo( other : IRingCursor<T> ); overload;
      procedure MoveTo( position : cardinal ); overload;
      function Next( out t : T ) : boolean;
      function Prev( out t : T ) : boolean;
      procedure InjectPrev( const val : T );
      procedure InjectNext( const val : T );
      procedure DeleteNext;
      function GetValue : T;
      procedure SetValue( v : T );
      function GetIndex : cardinal;
      property value : T read GetValue write SetValue;
      property index : cardinal read GetIndex;
    public  { for..in loop interface }
      property current  : T read GetValue;
      function MoveNext : boolean;
      function MovePrev : boolean; // not part of for..in
    end;
#+end_src
* =GRing<T>= the main ring type
#+name: GRing
#+begin_src pascal
  type GRing<T> = class(GNode<T>)
    private type
      GNodeT         = GNode<T>;
      GNodeStack     = GStack<GNodeT>;
    public type { procedure types used by foreach, find }
      GNodeAction = procedure( var n : T ) is nested;
      GNodePredicate = function( n : T ) : Boolean is nested;
      /////////////////////////////////////////////////////////////
      // !! i don't see any way to move gcursor out of GRing yet :/
      <<GCursor>>
      /////////////////////////////////////////////////////////////
    protected
      _clasp : GClaspNode<T>; // holds the two ends together
      function FindNext( const start : GCellNode<T>;
                         var p : GNodeStack;
                         out v : GCellNode<T> ) : boolean;
      function FindPrev( const start : GCellNode<T>;
                         var p : GNodeStack;
                         out v : GCellNode<T> ) : boolean;
      function FirstCell: GCellNode<T>;
      function LastCell: GCellNode<T>;
    public
      constructor Create;
      destructor Destroy; override;
    public { interface for adding nodes }
      procedure Append( n : GNode<T> ); overload;
      procedure Insert( n : GNode<T> ); overload;
      // TODO: procedure InsertAt( i : cardinal; val : GNode<T> ); overload;
    public { interface for adding / removing values }
      procedure Append( val : T ); overload;
      procedure Extend( vals : array of T );
      procedure Insert( val : T ); overload;
      procedure InsertAt( i : cardinal; val : T );
      procedure DeleteAt( i : cardinal );
      procedure Remove( val : T );
      procedure Drop;
      procedure Clear;
      procedure ForEach( action : GNodeAction );
      function Find( pred : GNodePredicate ) : T;
      function IsEmpty: boolean;
      function First : T;
      function Last : T;
      function Length : cardinal; override;
      function MakeCursor : IRingCursor<T>;
      function GetItem(position: cardinal) : T;
      procedure SetItem(position: cardinal; val : T);
      property items[at:cardinal] : T
        read GetItem write SetItem; default;
    { -- interface for for..in loops -- }
    public
      function GetEnumerator : IRingCursor<T>;
    end;
#+end_src

* =GElement<T>= a ring with a tag and attributes (like an Element in xml)
#+name: GElement
#+begin_src pascal
  // !! The meta-data might not be the same type as the
  // actual data. (For example, you may want to represent
  // a mapping of keys of one type to data of another).
  //
  // It may make sense to use a second type parameter here,
  // but for now, I'm just going to use variants.
  type
     GElement<T> = class( GRing<T> )
       protected
         _tag  : variant;
         _attr : TVarDict;
       public
         constructor Create; overload;
         constructor Create( aTag : variant ); overload;
         procedure SetTag( val: variant );
         function GetTag : variant;
         procedure SetAttr( key : string; val: variant );
         function GetAttr( key : string ) : variant;
         property Attrs[ key : string ] : variant
           read GetAttr write SetAttr; default; // use .items for values
         property tag : variant
           read GetTag write SetTag;
     end;
#+end_src


* implementation
** =GNode<T>=
#+name: GNode.methods
#+begin_src pascal
  { -- link ( internal type ) -- }

  constructor GNode<T>.Create;
  begin
    self.NextLink := nil;
    self.PrevLink := nil;
  end;

  function GNode<T>.Length : cardinal;
  begin
    result := 0;
  end;
#+end_src

** =GCellNode<T>=
#+name: GCellNode.methods
#+begin_src pascal

  constructor GCellNode<T>.Create( v : T );
    begin
    inherited Create;
    self.value := v;
  end;

  procedure GCellNode<T>._set( v : T );
  begin self._val := v;
  end;

  function GCellNode<T>._get : T;
  begin result := self._val;
  end;

  function GCellNode<T>.IsClasp : boolean;
  begin
    result := false;
  end;

  function GCellNode<T>.Length : cardinal;
  begin
    result := 1;
  end;

#+end_src

** =GClaspNode<T>=
#+name: GClaspNode.methods
#+begin_src pascal
  constructor GClaspNode<T>.Create;
    begin
      self.NextLink := self;
      self.PrevLink := self;
    end;

  function GClaspNode<T>.IsClasp : boolean;
    begin
      result := true;
    end;

  function GClaspNode<T>.Length : cardinal;
    begin
      result := 0;
    end;

#+end_src

** =GRing<T>.TCursor=
#+name: GCursor.methods
#+begin_src pascal

  constructor GRing<T>.TCursor.Create( lis : GRing<T> );
    begin
      _ring := lis;
      //  todo: use a dynamically resizable stack
      _path := GNodeStack.Create( kMaxDepth );
      self.Reset;
    end;

  destructor GRing<T>.TCursor.Destroy;
    begin inherited; _path.Free;
    end;

  procedure GRing<T>.TCursor.Reset;
    begin
      _cell := _ring._clasp;
      _idx := 0;
    end;

#+end_src

*** NextCell and PrevCell navigate the tree.

The default implementation does a depth-first walk.
#+name: GCursor.methods
#+begin_src pascal
  function GRing<T>.TCursor.NextCell : GCellNode<T>;
    begin
      _ring.FindNext( _cell, _path, result )
    end;

  function GRing<T>.TCursor.PrevCell : GCellNode<T>;
    begin
      _ring.FindPrev( _cell, _path, result )
    end;

  function GRing<T>.TCursor.MoveNext : boolean;
    begin
      if _ring.IsEmpty then result := false
      else begin
        _cell := self.NextCell;
        inc( _idx );
        result := ( _cell <> _ring._clasp );
      end
    end;

  function GRing<T>.TCursor.Next( out t : T ) : boolean;
    begin
      result := self.MoveNext;
      if result then t := _cell.value;
    end;

  function GRing<T>.TCursor.MovePrev : boolean;
    begin
      if _ring.IsEmpty then result := false
      else begin
        _cell := self.PrevCell;
        if _idx = 0 then _idx := _ring.Length else dec( _idx );
        result := ( _cell <> _ring._clasp );
      end
    end;

  function GRing<T>.TCursor.Prev( out t : T ) : boolean;
    begin
      result := self.MovePrev;
      if result then t := _cell.value;
    end;

#+end_src

*** jump to top (hub)
#+name: GCursor.methods
#+begin_src pascal
  procedure GRing<T>.TCursor.ToTop;
    begin
      if _ring.IsEmpty then raise Exception.Create('no top item to go to')
      else begin
        self.Reset;
        self.MoveNext
      end
    end;

    procedure GRing<T>.TCursor.ToEnd;
    begin
      if _ring.IsEmpty then raise Exception.Create('no end item to go to')
      else begin
        self.Reset;
        self.MovePrev
      end
    end;

    function GRing<T>.TCursor.AtTop : boolean;
    begin
      result := (self.PrevCell = _ring._clasp) and not _ring.IsEmpty;
    end;

    function GRing<T>.TCursor.AtEnd : boolean;
    begin
      result := (self.NextCell = _ring._clasp) and not _ring.IsEmpty;
    end;

    function GRing<T>.TCursor.AtClasp : boolean;
    begin
      result := (self._cell = _ring._clasp);
    end;

    procedure GRing<T>.TCursor.MoveTo( other : IRingCursor<T> );
    begin
      with other as GRing<T>.TCursor do
        begin
          self._cell := _cell;
          self._idx  := _idx;
          self._ring := _ring;
        end;
    end;

    procedure GRing<T>.TCursor.MoveTo( position : cardinal );
    var i : cardinal;
    begin
      if position < _ring.length then
        begin
          self.ToTop;
          if position > 0 then
            for i := 1 to position do self.MoveNext
        end
      else raise Exception.Create(Utf8Encode('out of bounds: ')
                  + IntToStr(position))
    end;
#+end_src

*** values

Values are stored in cell nodes.

#+name: GCursor.methods
#+begin_src pascal
    function GRing<T>.TCursor.GetValue : t;
    begin
      if _cell = _ring._clasp then
        raise Exception.Create(
                'can''t get value at the clasp. move the cursor.' )
      else result := _cell.value
    end;

    procedure GRing<T>.TCursor.SetValue( v : T );
    begin
      if _cell = _ring._clasp then
        raise Exception.Create(
                'can''t set value at the clasp. move the cursor.' )
      else _cell.value := v
    end;

    function GRing<T>.TCursor.GetIndex : cardinal;
    begin
      result := _idx;
    end;
#+end_src

*** Injecting new nodes into the tree.
#+name: GCursor.methods
#+begin_src pascal
    procedure GRing<T>.TCursor.InjectPrev( const val : T );
      var ln : GNode<T>;
    begin
      inc( self._idx );
      ln := GCellNode<T>.Create( val );
      ln.NextLink := self._cell;
      ln.PrevLink := self._cell.PrevLink;
      self._cell.PrevLink.NextLink := ln;
      self._cell.PrevLink := ln;
    end;

    procedure GRing<T>.TCursor.InjectNext( const val : T );
      var ln : GNode<T>;
    begin
      // we don't increase the index here because we're injecting *after*
      ln := GCellNode<T>.Create( val );
      ln.PrevLink := self._cell;
      ln.NextLink := self._cell.NextLink;
      self._cell.NextLink.PrevLink := ln;
      self._cell.NextLink := ln;
    end;
#+end_src

*** Deleting old nodes
#+name: GCursor.methods
#+begin_src pascal
    //  this is probably leaking memory. how to deal with pointers?
    procedure GRing<T>.TCursor.DeleteNext;
      var temp : GNode<T>;
    begin
      temp := self._cell.NextLink;
      if temp <> self._ring._clasp then
      begin
        self._cell.NextLink := temp.NextLink;
        self._cell.NextLink.PrevLink := self._cell;
        temp.NextLink := nil;
        temp.PrevLink := nil;
        // todo: temp.free
      end
    end;

#+end_src
** =GRing<T>=

*** Constructor, accessors
#+name: GRing.methods
#+begin_src pascal

  constructor GRing<T>.Create;
    begin _clasp := GClaspNode<T>.Create;
    end;

  destructor GRing<T>.Destroy;
    begin _clasp.Free; inherited;
    end;

  function GRing<T>.MakeCursor : IRingCursor<T>;
    begin
      result := TCursor.Create( self );
    end;

  function GRing<T>.GetItem(position: cardinal) : T;
    begin
      with MakeCursor do
        begin
          MoveTo(position);
          result := value;
        end
    end;

  procedure GRing<T>.SetItem(position: cardinal; val : T);
    begin
      with MakeCursor do
        begin
          MoveTo(position);
          value := val;
        end
    end;

  { this allows 'for .. in' in the fpc / delphi compilers }
  function GRing<T>.GetEnumerator: IRingCursor<T>;
    begin
      result := self.MakeCursor
    end;

#+end_src

*** Length, Find, ForEach
#+name: GRing.methods
#+begin_src pascal

  function GRing<T>.Length : cardinal;
    var ln : GNode<T>;
    begin
      result := 0;
      ln := _clasp;
      repeat
        inc( result, ln.Length );
        ln := ln.NextLink;
      until ln = _clasp;
    end;


  function GRing<T>.Find( pred : GNodePredicate ) : T;
    var cur : IRingCursor<T>; found : boolean = false;
    begin
      cur := self.MakeCursor;
      cur.ToTop;
      repeat
        found := pred( cur.value )
      until found or not cur.MoveNext;
      if found then result := cur.value
    end; { Find }

  procedure GRing<T>.ForEach( action : GNodeAction );
    var item, ref : T;
    begin // without ref, we get this error in recent 2.7.1 builds...
         // Error:Illegal assignment to for-loop variable "item"
      for item in self do begin ref := item; action( ref ) end;
    end;

#+end_src

*** Insert / Append (nodes)
#+name: GRing.methods
#+begin_src pascal

  { Insert : add to the start of the list, right after the clasp }
  procedure GRing<T>.Insert( n : GNode<T> );
    begin
      n.PrevLink := _clasp;
      n.NextLink := _clasp.NextLink;
      _clasp.NextLink.PrevLink := n;
      _clasp.NextLink := n;
    end;

  { Append : add to the end of the list, right before the clasp }
  procedure GRing<T>.Append( n : GNode<T> );
    begin
      n.NextLink := _clasp;
      n.PrevLink := _clasp.PrevLink;
      _clasp.PrevLink.NextLink := n;
      _clasp.PrevLink := n;
    end;

#+end_src

*** Insert / Append (values)
*** insert
#+name: GRing.methods
#+begin_src pascal
  { Insert : add to the start of the list, right after the clasp }
  procedure GRing<T>.Insert( val : T );
    begin
      self.Insert(GCellNode<T>.Create( val ));
    end;
  
  procedure GRing<T>.InsertAt( i : cardinal; val : T );
    var cur : IRingCursor<T>;
    begin
      cur := self.MakeCursor;
      if i >= Length then cur.ToEnd
      else while cur.index < i do cur.MoveNext;
      cur.InjectNext( val );
    end; { InsertAt }
#+end_src
*** deleteat
#+name: GRing.methods
#+begin_src pascal
  procedure GRing<T>.DeleteAt( i : cardinal );
    var c : IRingCursor<T>; n : cardinal;
    begin
      c := self.MakeCursor;
      if i = 0 then
        c.DeleteNext
      else
        begin
          c.MoveTo(i);
          c.ToTop;
          for n := 1 to i do c.MoveNext;
          c.MovePrev;
          c.DeleteNext;
        end;
    end; { DeleteAt }
#+end_src

*** append/extend
#+name: GRing.methods
#+begin_src pascal
  
  { Append : add to the end of the list, right before the clasp }
  procedure GRing<T>.Append( val : T );
    begin self.Append(GCellNode<T>.Create( val ));
    end;
  
  procedure GRing<T>.Extend( vals : array of T );
    var val : T;
    begin for val in vals do self.Append(GCellNode<T>.Create(val));
    end;
  
#+end_src


**** removing nodes
#+name: GRing.methods
#+begin_src pascal
  procedure GRing<T>.Remove( val : T );
    var c : IRingCursor<T>; found : boolean = false;
    begin
      if not self.IsEmpty then ok
      else begin
        c := self.MakeCursor;
        repeat
          c.MoveNext;
          found := c.value = val;
        until found or c.AtEnd;
        if found then begin
          c.MovePrev;
          c.DeleteNext
        end
      end
    end; { Remove }

  procedure GRing<T>.Drop;
      var temp : GNode<T>;
    begin
      if IsEmpty then raise
        Exception.Create(a2u('attempted to drop from empty list'))
      else with makeCursor do begin toend; moveprev; deletenext end
    end;

  procedure GRing<T>.Clear;
    begin while not isempty do drop
    end;

  function GRing<T>.IsEmpty : boolean;
    begin result := _clasp.nextlink.equals(_clasp)
    end;

  function GRing<T>.FindNext(const start : GCellNode<T>;
                               var p     : GNodeStack;
                               out v     : GCellNode<T>) : boolean;
    var ln : GNode<T>;
    begin
      result := false;
      ln := start;
      repeat
        if ( ln is GCellNode<T> ) then
          with ln as GCellNode<T> do ln := ln.NextLink;
        if ( ln is GRing<T> ) then
          with ln as GRing<T> do begin
            p.push( ln );
            if Length = 0 then ln := ln.NextLink
            else ln := _clasp
          end
        else if ln is GClaspNode<T> then
          if p.count > 0 then ln := p.pop
          else ln := _clasp
        else if ln is GCellNode<T> then
          begin
            result := true;
            v := ln as GCellNode<T>;
          end
      until result or ( ln = _clasp );
      v := ln as GCellNode<T>;
    end;

  { should be exactly the same as above but s/Next/Prev/g }
  function GRing<T>.FindPrev(
                     const start : GCellNode<T>;
                       var p     : GNodeStack;
                       out v     : GCellNode<T> ) : boolean;
      var ln : GNode<T>;
    begin
      result := false;
      ln := start;
      repeat
        ln := ln.PrevLink;
        if ( ln is GRing<T> ) then
          with (ln as GRing<T>) do begin
            p.push( ln as GRing<T> );
            if ( Length = 0 ) then ln := ln.PrevLink
            else result := FindPrev(_clasp, p, v )
          end
        else if ln is GClaspNode<T> then begin
          if p.count > 0 then ln := p.pop
          else ln := _clasp
        end
        else if ln is GCellNode<T> then begin
          result := true;
          v := ln as GCellNode<T>;
        end
      until result or ( ln = _clasp );
      v := ln as GCellNode<T>;
    end;

  function GRing<T>.FirstCell : GCellNode<T>;
    var p : GNodeStack;
    begin
      p := GNodeStack.Create( kMaxDepth );
      if self.IsEmpty then
        raise Exception.Create('empty list has no first member.')
      else if not FindNext( _clasp, p, result ) then
        raise Exception.Create('nested empty list has no first member.')
    end;

  function GRing<T>.First : T;
    begin
      result := self.FirstCell.value;
    end;

  function GRing<T>.LastCell : GCellNode<T>;
    var p : GNodeStack;
    begin
      p := GNodeStack.Create( kMaxDepth );
      if IsEmpty then
        raise Exception.Create('empty list has no last member.')
      else if not FindPrev( _clasp, p, result ) then
        raise Exception.Create('nested empty list has no last member.')
    end;

  function GRing<T>.Last: T;
    begin
      result := self.LastCell.value;
    end; { Last }


#+end_src

** =GElement<T>=

*** constructor
#+name: GElement.methods
#+begin_src pascal

  constructor GElement<T>.Create;
    begin
      inherited Create;
      _attr := TVarDict.Create;
    end;

  constructor GElement<T>.Create( aTag : variant );
    begin
      self.Create;
      self.tag := aTag;
    end;

#+end_src

*** tag accesors
#+name: GElement.methods
#+begin_src pascal

  procedure GElement<T>.SetTag( val: variant );
    begin
      _tag := val
    end;

  function GElement<T>.GetTag : variant;
    begin
      result := _tag
    end;

#+end_src

*** attribute accessors
#+name: GElement.methods
#+begin_src pascal

  procedure GElement<T>.SetAttr( key : string; val: variant );
    begin
      _attr[ key ] := val
    end;

  function GElement<T>.GetAttr( key : string ) : variant;
    begin
      result := _attr[ key ]
    end;

#+end_src




* OUTPUT =rings.pas=
#+begin_src pascal :tangle "../code/rings.pas" :noweb tangle

  {-- code generated from rings.pas.org --}

  {$mode delphi}{$i xpc.inc}
  unit rings;
  interface uses xpc, sysutils, stacks, dicts;

    const kMaxDepth = 16;
    <<GNode>>
    <<GCellNode>>
    <<GClaspNode>>
    <<IRingCursor>>
    <<GRing>>
    <<GElement>>

  implementation
    <<GNode.methods>>
    <<GCellNode.methods>>
    <<GClaspNode.methods>>
    <<IRingCursor.methods>>
    <<GRing.methods>>
    <<GCursor.methods>>
    <<GElement.methods>>
  initialization
  end.
#+end_src
