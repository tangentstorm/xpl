#+title: kvm : keyboard/video/mouse support for virtual consoles
#+author: Michal J Wallace
#+date: <2013-06-08 Sat>

* Goals
This module implements an enhanced terminal device with support for unicode and a 256 color palette.
* Class Hierarchy
- building blocks
  - =TPoint= :: an (x,y) record pair used for tracking the cursor
  - =TTextAttr= :: a (fg, bg : byte) pair, representing a 256 color palette
  - =TTermCell= :: a (TTextAttr, WideChar) record pair
  - =TTermGrid= :: a GGrid2D subclass containing TTermCell records
- =ITerm= :: the interface shared by all units
  - =TBaseTerm= :: abstract superclass
    - =TGridTerm= :: generic in-memory terminal
      - =TSubTerm= :: represents the sub-window of another term
    - =TAnsiTerm= :: outputs ansi escape codes, for external terminal emulators
    - =TVideoTerm= :: uses free pascal's =video= unit

* =ITerm= : the abstract screen interface

A screen tracks a cursor position, bounds, color.

#+name: ITerm
#+begin_src pascal
  type ITerm = interface
    function  Width : word;
    function  Height: word;
    function  XMax  : word;
    function  YMax  : word;
    function  WhereX: word;
    function  WhereY: word;
    procedure ClrScr;
    procedure ClrEol;
    procedure NewLine;
    procedure ScrollUp;
    procedure Fg( color : byte );
    procedure Bg( color : byte );
    procedure Emit( s : TStr );
    procedure GotoXY( x, y : word );
    procedure InsLine;
    procedure DelLine;
    procedure SetTextAttr( value : word );
    function  GetTextAttr : word;
    property  TextAttr : word read GetTextAttr write SetTextAttr;
    procedure ShowCursor;
    procedure HideCursor;
    procedure Resize( NewW, NewH : word );
  end;
#+end_src

* Data Types
** TTextAttr
For our text attributes, we're going to use 256 colors. This strikes a good balance between storage space and aesthetics. There's really not much need for more colors than this when we're talking about a fixed-width text display.

#+name: TTextAttr
#+begin_src pascal
  type TTextAttr = record
      bg : byte;
      fg : byte;
    end;
#+end_src

** TTermCell

A terminal cell combines a text attribute with a 16-bit WideChar.

#+name: TTermCell
#+begin_src pascal
  type TTermCell = record
      ch   : widechar;
      attr : TTextAttr;
    end;
#+end_src

** TTermGrid

A terminal's display buffer is essentially a grid of such cells. I'm using my [[https://github.com/tangentstorm/xpl/blob/master/code/grids.pas][generic =GGrid2d= class]] here to avoid duplicating code.

#+name: TTermGrid
#+begin_src pascal
  type TTermGrid = class (specialize GGrid2d<TTermCell>)
    private
      function GetAttr( const x, y : word ) : TTextAttr;
      function GetChar( const x, y : word ) : WideChar;
      procedure SetAttr( const x, y : word; const value : TTextAttr );
      procedure SetChar( const x, y : word; const value : WideChar );
    public
      property attrs[ x, y : word ] : TTextAttr read GetAttr write SetAttr;
      property chars[ x, y : word ] : WideChar read GetChar write SetChar;
    end;
#+end_src

#+name: @kvm:impl
#+begin_src pascal

  function TTermGrid.GetAttr( const x, y : word ) : TTextAttr;
    begin
      result.fg := self[ x, y ].attr.fg;
      result.bg := self[ x, y ].attr.bg;
    end;

  procedure TTermGrid.SetAttr( const x, y  : word;
                               const value : TTextAttr );
    begin
      with _data[ xyToI( x, y ) ].attr do
        begin
          bg := value.bg;
          fg := value.fg;
        end
    end;

  function TTermGrid.GetChar( const x, y : word ) : WideChar;
    begin
      result := self[ x, y ].ch;
    end;

  procedure TTermGrid.SetChar( const x, y  : word;
                               const value : WideChar );
    begin
      _data[ xyToI( x, y ) ].ch := value;
    end;

#+end_src

** TPoint

#+name: TPoint
#+begin_src pascal
  type TPoint = class
    x, y : cardinal;
  end;
#+end_src

** TRect
#+name: TRect
#+begin_src pascal
  type TRect = class
    x, y : cardinal;
    w, h : cardinal;
  end;
#+end_src

** Event Types
#+name: event-types
#+begin_src pascal
type
  TOnEmit = procedure( s : TStr ) of object;
  TOnGotoXY = procedure( x, y : word ) of object;
  TOnSetTextAttr = procedure( a : TTextAttr ) of object;
#+end_src

* =TBaseTerm=
:PROPERTIES:
:TS:       <2014-04-02 01:31AM>
:ID:       5pd3oiy0vfg0
:END:
** interface
#+name: TBaseTerm
#+begin_src pascal
  type TBaseTerm = class (TInterfacedObject, ITerm)
    protected
      _attr  : TTextAttr;
      _curs  : TPoint;
      _w, _h : word;
    public
      constructor Create( NewW, NewH : word ); virtual;
      function Width : word; virtual;
      function Height : word; virtual;
      function xMax : word; virtual;
      function yMax : word; virtual;
      function WhereX : word; virtual;
      function WhereY : word; virtual;
      procedure GotoXY( x, y : word ); virtual;
      procedure ClrScr; virtual;
      procedure ClrEol; virtual;
      procedure NewLine; virtual;
      procedure ScrollUp; virtual;
      procedure Fg( color : byte ); virtual;
      procedure Bg( color : byte ); virtual;
      function GetTextAttr : word;
      procedure SetTextAttr( value : word ); virtual;
      procedure EmitChar( ch : TChr ); virtual;
      procedure Emit( s : TStr );
      procedure InsLine; virtual;
      procedure DelLine; virtual;
      procedure ShowCursor; virtual;
      procedure HideCursor; virtual;
      procedure Resize( NewW, NewH : word );
    protected
      _OnEmit : TOnEmit;
      _OnGotoXY : TOnGotoXY;
      _OnSetTextAttr : TOnSetTextAttr;
    published
      property w : word read Width;
      property h : word read Height;
      property OnEmit : TOnEmit read _OnEmit write _OnEmit;
      property OnGotoXY : TOnGotoXY read _OnGotoXY write _OnGotoXY;
      property OnSetTextAttr : TOnSetTextAttr
        read _OnSetTextAttr write _OnSetTextAttr;
    end;
#+end_src
** implementation
*** constructor
#+name: @kvm:impl
#+begin_src pascal
  constructor TBaseTerm.Create( NewW, NewH : word );
    begin
      _w := NewW; _h := NewH;
      _curs := TPoint.Create; _curs.x := 0; _curs.y := 0;
      _attr.fg := $07; _attr.bg := $00; // light gray on black
    end;
#+end_src

*** display geometry
#+name: @kvm:impl
#+begin_src pascal
  function TBaseTerm.Width : word; begin result := _w end;
  function TBaseTerm.Height: word; begin result := _h end;
  function TBaseTerm.XMax : word; begin result := width - 1  end;
  function TBaseTerm.YMax : word; begin result := height - 1 end;
  procedure TBaseTerm.Resize( NewW, NewH : word );
    begin
      _w := NewW; _h := NewH;
    end;
#+end_src

*** cursor position
#+name: @kvm:impl
#+begin_src pascal

  function TBaseTerm.WhereX : word; begin result := _curs.x end;
  function TBaseTerm.WhereY : word; begin result := _curs.y end;

  procedure TBaseTerm.GotoXY( x, y : word );
    begin
      _curs.x := x;
      _curs.y := y;
      if assigned(_OnGotoXY) then _OnGotoXY( x, y );
    end;

#+end_src


#+name: @kvm:impl
#+begin_src pascal
  procedure TBaseTerm.ClrScr;
    var y : word; i : integer;
    begin
      for y := 0 to yMax do
        begin
          gotoxy(0, y);
          for i := 1 to self.width do Emit(' ');
        end;
      gotoxy(0, 0);
    end;

  procedure TBaseTerm.ClrEol;
    var oldX, i : word;
    begin
      oldX := _curs.x;
      if oldX < xMax then for i := oldX to xMax do Emit(' ')
      else ok;
    { ensure curs'.x = curs.x ; curs'.y = curs.y }
      self.gotoXY( oldX, _curs.y );
    end;

  procedure TBaseTerm.NewLine;
    begin
      if whereY = yMax then begin scrollUp; gotoXY( 0, yMax ) end
      else self.gotoXY( 0, whereY+1 );
    end;

  procedure TBaseTerm.ScrollUp;
    var x, y : cardinal;
    begin
      x := _curs.x; y := _curs.y; gotoXY(0,0); delLine; gotoXY(x, y);
    end;

#+end_src

*** cursor display

It may not always be possible to change the shape of the cursor, so by default, these do nothing.

#+name: @kvm:impl
#+begin_src pascal

  procedure TBaseTerm.ShowCursor; begin ok end;
  procedure TBaseTerm.HideCursor; begin ok end;

#+end_src

*** TODO ins/delete lines

These may have to be pushed down into gridterm, or else everything needs to have a grid.

#+name: @kvm:impl
#+begin_src pascal

  procedure TBaseTerm.InsLine; begin ok end;
  procedure TBaseTerm.DelLine; begin ok end;

#+end_src

*** text atttributes

These control the foreground and background colors of the characters generated with (emit).

#+name: @kvm:impl
#+begin_src pascal

  function  TBaseTerm.GetTextAttr : word;
    begin
      result := word(_attr)
    end;

  procedure TBaseTerm.SetTextAttr( value : word );
    begin
      _attr := TTextAttr(value)
    end;

  procedure TBaseTerm.Fg( color : byte );
    begin
      _attr.fg := color
    end;

  procedure TBaseTerm.Bg( color : byte );
    begin
      _attr.bg := color
    end;

#+end_src

*** text emitter
#+name: @kvm:impl
#+begin_src pascal

  procedure TBaseTerm.EmitChar( ch : TChr );
     begin
     end;

  procedure TBaseTerm.Emit( s : TStr );
    var ch : widechar; dist : cardinal;
    begin
      if length(s) > 0 then begin
        dist := _w - _curs.x; // distance to end of line
        if length(s) <= dist then
          begin
            // ensure  xpos' = xpos + dist
            for ch in s do begin EmitChar(ch); _curs.x += 1; end;
            if assigned(_OnEmit) then _OnEmit(s);
          end
        else
          begin
            emit(midstr(s, 1, dist));
            chk.equal( _w, _curs.x );
            self.newline;
            chk.equal( 0, _curs.x );
            emit(midstr(s, dist, length(s)-dist));
          end
      end
    end;
#+end_src

* =TGridTerm=
** interface

#+name: TGridTerm
#+begin_src pascal
  type TGridTerm = class (TBaseTerm, ITerm)
    private
      _grid : TTermGrid;
    public
      constructor Create( NewW, NewH : word ); override;
      destructor Destroy; override;
      function GetCell( const x, y : word ) : TTermCell;
      procedure PutCell( const x, y : word; const cell : TTermCell );
      procedure ClrScr; override;
      procedure EmitChar( wc : widechar ); override;
      property cells[ x, y : word ] : TTermCell
        read GetCell write PutCell; default;
      procedure DelLine; override;
    end;
#+end_src

** Implementation

#+name: @kvm:impl
#+begin_src pascal

  constructor TGridTerm.Create( NewW, NewH : word );
    begin
      inherited create( NewW, NewH );
      _grid := TTermGrid.Create( NewW, NewH );
      clrscr;
    end;

  destructor TGridTerm.Destroy;
    begin;
      _grid.Free;
      inherited destroy;
    end;

  procedure TGridTerm.ClrScr;
    var cell : TTermCell;
    begin
      inherited clrscr;
      cell.ch := ' ';
      cell.attr := _attr;
      _grid.fill(cell);
      gotoxy(0,0);
    end;

  procedure TGridTerm.EmitChar( wc : widechar );
    var cell : TTermCell;
    begin
      cell.attr := _attr; cell.ch := wc;
      _grid[_curs.x, _curs.y] := cell;
    end;

  function TGridTerm.GetCell( const x, y : word ) : TTermCell;
    begin
      result := _grid[x,y]
    end;

  procedure TGridTerm.PutCell( const x, y : word; const cell : TTermCell );
    begin
      _grid[x,y] := cell;
    end;

  procedure TGridTerm.DelLine;
    var curx, cury, x, y : integer;
    begin
      curx := wherex; cury := wherey;
      for y := cury to ymax-1 do
        begin
          gotoxy(0, y);
          for x := 0 to xmax do
            begin
              emit(_grid[x, y+1].ch);
            end;
          end;
      gotoxy(0, ymax); clreol;
      gotoxy(curx, cury);
    end;

#+end_src

* =TAnsiTerm=
#+name: TAnsiTerm
#+begin_src pascal
  type TAnsiTerm = class (TBaseTerm)
    public
      constructor Create( NewW, NewH : word; CurX, CurY : byte );
        reintroduce;
      procedure DoGotoXY( x, y : word );
      procedure DoEmit( s : TStr );
      //  the rest of these should be callbacks too:
      procedure ResetColor;
      procedure Fg( color : byte ); override;
      procedure Bg( color : byte ); override;
      procedure ClrScr; override;
      procedure ShowCursor; override;
      procedure HideCursor; override;
  end;
#+end_src

#+name: @kvm:impl
#+begin_src pascal
  constructor TAnsiTerm.Create(NewW, NewH : word; CurX, CurY : byte);
    begin
      inherited Create( NewW, NewH );
      // we set xy directly because the cursor is already
      // somewhere when the program starts.
      _curs.x := curx;
      _curs.y := cury;
      _OnGotoXY := @DoGotoXY;
      _OnEmit := @DoEmit;
    end;

  procedure TAnsiTerm.Fg( color : byte );
    begin
      inherited fg( color );
      _attr.fg := color;
      { xterm 256-color extensions }
      write( stdout, #27, '[38;5;', color , 'm' )
    end;

  procedure TAnsiTerm.Bg( color : byte );
    begin
      inherited bg( color );
      _attr.bg := color;
      { xterm 256-color extensions }
      write( stdout, #27, '[48;5;', color , 'm' )
    end;

  procedure TAnsiTerm.ClrScr;
    begin
      write( stdout, #27, '[H', #27, '[J' )
    end;

  procedure TAnsiTerm.DoGotoXY( x, y : word );
    begin
      write(stdout, #27, '[', y + 1, ';', x + 1, 'H' )
    end;

  procedure TAnsiTerm.DoEmit( s : TStr );
    begin
      write(stdout, utf8encode(s));
    end;

  procedure TAnsiTerm.ResetColor;
    begin
      write(stdout, #27, '[0m' )
    end;

  procedure TAnsiTerm.ShowCursor; // !! xterm / dec terminals
    begin
      write(stdout, #27, '[?25h');
    end;

  procedure TAnsiTerm.HideCursor; // !! xterm / dec terminals
    begin
      write(stdout, #27, '[?25l');
    end;

#+end_src

* =TSubTerm= : a window inside a terminal
** interface
#+name: TSubTerm
#+begin_src pascal
  type
    TSubTerm = class (TGridTerm)
      protected
        _term : ITerm;
        _x, _y : word;
      public
        constructor Create(term : ITerm; x, y, NewW, NewH : word ); reintroduce;
        procedure DoGotoXY( x, y : word );
        procedure DoEmit( s : TStr );
        procedure DoSetTextAttr( value : word );
      end;
#+end_src

** implementation

We start with a handful of member variables to track the bounds:

#+name: @kvm:impl
#+begin_src pascal

  constructor TSubTerm.Create(term : ITerm; x, y, NewW, NewH : word );
    begin
      inherited Create(NewW, NewH);
      _term := term;
      _x := x; _y := y;
      _OnEmit := @DoEmit;
      _OnGotoXy := @DoGotoXY;
    end;

  procedure TSubTerm.DoGotoXY( x, y : word );
    begin
      _term.GotoXY( x + _x, y + _y );
    end;

  procedure TSubTerm.DoEmit( s : TStr );
    begin
      _term.Emit( s );
    end;

  procedure TSubTerm.DoSetTextAttr( value : word );
     begin
       _term.TextAttr := value;
     end;

#+end_src

* TODO =TVideoTerm= : uses free pascal's =video= unit
#+name: TVideoTerm
#+begin_src pascal
  type TVideoTerm = class (TANSITerm)
  end;
#+end_src

* char mnemonics for ansi colors.
#+name: @kvm:impl
#+begin_src pascal

  procedure bg( ch :  char );
    var i : byte;
    begin
      i := pos( ch, 'krgybmcwKRGYBMCW' );
      if i > 0 then bg( i - 1  );
    end;

  procedure fg( ch :  char );
    var i : byte;
    begin
      i := pos( ch, 'krgybmcwKRGYBMCW' );
      if i > 0 then fg( i - 1  );
    end;

#+end_src

These allow you to use one-letter characters for the first 16 colors, instead of refering to them by number. They are arranged according to the ANSI standard.

| *k* | 0 | black             |   | *K* |  8 | dark gray     |
| *r* | 1 | red               |   | *R* |  9 | light red     |
| *g* | 2 | green             |   | *G* | 10 | light green   |
| *y* | 3 | dark yellow/brown |   | *Y* | 11 | yellow        |
| *b* | 4 | blue              |   | *B* | 12 | light blue    |
| *m* | 5 | magenta           |   | *M* | 13 | light magenta |
| *c* | 6 | cyan              |   | *C* | 14 | light cyan    |
| *w* | 7 | light gray        |   | *W* | 15 | white         |

See also the [[https://github.com/tangentstorm/xpl/blob/master/code/cw.pas][cw unit]] (color + write).

* Text driver, for redirecting =write= and =writeln=
#+name: textdriver
#+begin_src pascal

  function KvmWrite(var f: textrec): integer;
    var s: ansistring;
    begin
      if f.bufpos > 0 then
        begin
          setlength(s, f.bufpos);
          move(f.buffer, s[1], f.bufpos);
          kvm.emit(TStr(s)); // convert to widestring
        end;
      f.bufpos := 0;
      Result := 0;
    end;

  function KvmClose(var txt: TTextRec): integer;
    begin
      Result := 0;
    end;

  function KvmOpen(var txt: TTextRec): integer;
    begin
      case txt.mode of
        fmOutput:
        begin
          txt.inOutFunc := @KvmWrite;
          txt.flushFunc := @KvmWrite;
        end
        else // todo : error;
      end;
      Result := 0;
    end;

  // http://docwiki.embarcadero.com/RADStudio/XE5/en/Standard_Routines_and_Input-Output
  procedure AssignKvm(var txt: Text);
    begin
      Assign(txt, '');
      with TTextRec(txt) do
      begin
        mode := fmClosed;
        openFunc := @KvmOpen;
        closeFunc := @KvmClose;
      end;
    end;
#+end_src

* Unit Life cycle

There are basically two steps to deal with:

#+name: lifecycle
#+begin_src pascal
  initialization
    <<redirect-io>>
    <<create-term-obj>>
  finalization
    { work is destroyed automatically by reference count }
#+end_src

First, we want to redirect the =Output= file, so that calls to =Write= and =WriteLn= are sent through =KvmWrite=. Since we may still need to access the standard output (especially in the case of =ANSITerm=), we'll also create a new file descriptor.

#+name: redirect-io
#+begin_src pascal
  Assign(stdout,''); Rewrite(stdout);
  AssignKVM(output); Rewrite(output);
#+end_src

The second step is simply to create a new =ITerm= instance and assign the =work= variable.


#+name: @kvm:impl
#+begin_src pascal
  {$IFDEF UNIX}
  function GetLiveAnsiTerm : TAnsiTerm;
    var termw, termh : byte; curx, cury : byte;
    begin
      terminal.getwh(termw, termh);
      curx := terminal.startX;
      cury := terminal.startY;
      result := TAnsiTerm.Create( termw, termh, curx, cury );
    end;
  {$ENDIF}
#+end_src

#+name: create-term-obj
#+begin_src pascal
  {$IFDEF UNIX}
    work :={$IFDEF VIDEOKVM}TVideoTerm.Create
           {$ELSE}GetLiveANSITerm{$ENDIF};
  {$ELSE}
    work := TGridTerm.Create(64, 16);
  {$ENDIF}
#+end_src

* Legacy interface : =CRT.pas=

CRT was the original console library for turbo pascal. It uses 1-based cordinates, and is limited to 16 colors.

** interface
#+begin_src pascal :tangle "../code/ucrt.pas" :noweb tangle



  { --- warning!! generated file. edit ../text/kvm.pas.org instead!! --- }


  {$mode objfpc}
  unit crt;
  interface uses kvm;

  { helpers }
  function crt_get_textattr : byte;
  procedure crt_set_textattr( value : byte );

  { window / cursor managament }
  var WindMaxX, WindMaxY, WindMinX, WindMinY : byte;
  procedure GotoXY( x, y : word );
  function  WhereX : byte;
  function  WhereY : byte;
  procedure Window( x1, y1, x2, y2 : Byte );
  procedure ClrEol;
  procedure ClrScr;
  procedure DelLine; { delete line at cursor }
  procedure InsLine; { insert line at cursor }

  { color }
  procedure TextColor( c : byte );
  procedure TextBackground( c : byte );
  procedure HighVideo;
  procedure LowVideo;
  procedure NormVideo; { restores color from startup }
  property TextAttr : byte
    read  crt_get_textattr
    write crt_set_textattr;

  { interaction }
  function  KeyPressed : boolean;
  function  ReadKey : char;
  procedure Delay;
  procedure Sound( hz : word );
  procedure NoSound;
  { TODO:
  property CheckBreak : boolean }

  implementation
    <<@crt:impl>>
  end.
#+end_src

** implementation
*** the =TextAttr= property

#+name: @crt:impl
#+begin_src pascal
  var _textattr : kvm.TTextAttr;
  type TCrtColor  = $0 .. $f;

  procedure crt_set_textattr( value : byte );
  begin
    _textattr.bg := hi( value );
    _textattr.fg := lo( value );
  end;

  function crt_get_textattr : byte;
  begin
    result := (_textattr.bg shl 8) + _textattr.fg;
  end;

  procedure TextColor( c : byte );
  begin
    _textattr.fg := TCrtColor( c );
  end;

  procedure TextBackground( c : byte );
  begin
    _textattr.bg := TCrtColor( c );
  end;

#+end_src

*** Cursor control
#+name: @crt:impl
#+begin_src pascal

  var _x, _y : byte;
  procedure GotoXY( x, y : word );
  begin
    _x := x;
    _y := y;
  end;

  function WhereX:byte;
    begin
      result := _X;
    end;

  function WhereY:byte;
    begin
      result := _y;
    end;

#+end_src

*** TODO finish implementing these
#+name: @crt:impl
#+begin_src pascal

  procedure window(x1,y1,x2,y2:byte);
    begin
      // TODO: i don't think this is right behavior
      windMinX := x1;
      windMinY := y1;
      windMaxX := x2;
      windMaxY := y2;
    end;

  procedure clreol;
    begin
    end;

  procedure clrscr;
    begin
    end;

  procedure delline; begin end;
  procedure insline; begin end;
  procedure highvideo; begin end;
  procedure lowvideo; begin end;
  procedure normvideo; begin end;
  function keypressed:boolean; begin result := false end;
  function readkey:char; begin result := #255 end;
  procedure delay; begin end;
  procedure sound( hz : word); begin end;
  procedure nosound; begin end;

#+end_src

* APPENDIX Convenience Routines

In general, you're only going to work with one screen at a time, so it's convenient to have a set of routines that deal with whatever the current screen happens to be at the moment.

** interface
These follow the ITerm interface exactly.

#+name: ITerm-Members
#+begin_src  pascal
  function  Width : word;
  function  Height: word;
  function  XMax  : word;
  function  YMax  : word;
  function  WhereX : word;
  function  WhereY : word;
  procedure ClrScr;
  procedure ClrEol;
  procedure Fg( color : byte );
  procedure Bg( color : byte );
  procedure Emit( s : TStr );
  procedure GotoXY( x, y : word );
  procedure InsLine;
  procedure DelLine;
  procedure SetTextAttr( value : word );
  function  GetTextAttr : word;
  property  TextAttr : word read GetTextAttr write SetTextAttr;
  procedure ShowCursor;
  procedure HideCursor;
#+end_src

** implementation

Since they just delegate to an =ITerm=, the implementation is trivial.

#+name: @kvm:impl
#+begin_src pascal
  function  Width  : word; begin result := work.Width end;
  function  Height : word; begin result := work.Height end;
  function  XMax   : word; begin result := work.xMax end;
  function  YMax   : word; begin result := work.yMax end;
  function  WhereX : word; begin result := work.WhereX end;
  function  WhereY : word; begin result := work.WhereY end;

  procedure Fg( color : byte );    begin work.Fg( color ) end;
  procedure Bg( color : byte );    begin work.Bg( color ) end;

  procedure Emit( s : TStr ); begin work.Emit( s ) end;
  procedure GotoXY( x, y : word ); begin work.GotoXY( x, y ) end;

  procedure ClrScr; begin work.ClrScr end;
  procedure ClrEol; begin work.ClrEol end;

  procedure InsLine; begin work.InsLine end;
  procedure DelLine; begin work.DelLine end;

  procedure ShowCursor; begin work.ShowCursor end;
  procedure HideCursor; begin work.HideCursor end;

  procedure SetTextAttr( value : word );
    begin work.TextAttr := value end;
  function  GetTextAttr : word;
    begin result := work.TextAttr end;
#+end_src

** Screens
#+begin_src pascal
  { these two are a bit trickier }
  function TScreen.GetTextAttr : word;
    begin
      result := ( work._fg shl 8 ) + work._bg;
    end;

  procedure TScreen.SetTextAttr( value : word );
    begin
      work._fg := value and $0f;
      work._bg := (value and $f00) shr 8;
      fg( work._fg );
      bg( work._bg );
    end;
#+end_src

* OUTPUT =kvm.pas=
#+begin_src pascal :tangle "../code/kvm.pas" :noweb tangle


  { --- warning!! generated file. edit ../text/kvm.pas.org instead!! --- }


  {$mode objfpc}{$i xpc.inc}
  unit kvm;
  interface uses xpc, ugrid2d, sysutils, strutils, chk,
    {$ifdef VIDEOKVM}video
    {$else}terminal
    {$endif}
    ;

  var stdout : text;

    <<ITerm>>
    {$DEFINE unitscope}
    <<ITerm-Members>>
    {$UNDEF unitscope}

    <<TTextAttr>>
    <<TTermCell>>
    <<TTermGrid>>
    <<TPoint>>
    <<TRect>>
    <<event-types>>
    <<TBaseTerm>>
    <<TGridTerm>>
    <<TAnsiTerm>>
    <<TVideoTerm>>
    <<TSubTerm>>

    procedure fg( ch : char );
    procedure bg( ch : char );

  var work : ITerm;

  implementation
    <<@kvm:impl>>
    <<textdriver>>
  <<lifecycle>>
  end.
#+end_src

* COMMENT
** TODO mouse support
#+name @kvm:inter
#+begin_src pascal
function hasmouse : boolean;
function mx : int32;
function my : int32;
function mb : set32;
#+end_src

#+name @kvm:impl
#+begin_src pascal
{  mouse routines are just stubs at the moment }

function hasmouse : boolean;
begin
  result := false;
end; { hasmouse }

function mx : int32;
begin
  result := 0;
end; { mx }

function my : int32;
begin
  result := 0;
end; { my }

function mb : set32;
begin
  result := [];
end; { mbtn }
#+end_src

** TODO bitmap fonts
#+begin_src pascal

type
{  this should probably get moved into its own class? }
type
  vector2d = record
	       case kind : ( asize, apoint, avec2d ) of
		 asize	: ( w, h : int32 );
		 apoint	: ( x, y : int32 );
		 avec2d	: ( v : array[ 0 .. 1 ] of int32 );
	     end;

  glyph	  = record
	      codepoint	: int32;
	      w, h	: int32;
	    end;

  bmpfont = record
	      size   : vector2d;
	      glyphs : array of glyph;
	    end;


#+end_src

** TODO 16-color ansi codes
#+begin_src pascal
  procedure ansi_fg( i : byte );
    begin
      if i < 8 then write(stdout, #27, '[0;3', i , 'm' )           // ansi dim
      else if i < 17 then write(stdout, #27, '[01;3', i-8 , 'm' ); // ansi bold
      // else do nothing
    end; { ansi_fg }

  {
  procedure ansi_bg( i : byte );
    begin
      if i < 8 then write( #27, '[0;3', i , 'm' )           // ansi dim
      else if i < 17 then write( #27, '[01;3', i-8 , 'm' ); // ansi bold
      // else do nothing
    end; }


#+end_src

** TODO bitmapped fonts

#+begin_src pascal
  procedure setfont( font :  bmpfont );
#+end_src

#+begin_src pascal
  procedure setfont( font : bmpfont );
    begin
    end;
#+end_src

** TODO canvas
#+begin_src pascal
  interface

    type
      color   = record
                  case separate : boolean of
                    true  : ( r, g, b, a : byte );
                    false : ( c : int32 );
                end;

      surface = record
                  w, h : int32;
                  data : array of int32;
                end;

      function hascanvas : boolean;
      var canvas : surface;
      var term : surface;

  implementation

      function HasCanvas : boolean;
        begin
          result := false;
        end; { HasCanvas }

#+end_src

** TODO future Goals?
| device           | in | out |                          |
|------------------+----+-----+--------------------------|
| keyboard         | x  |     |                          |
| mouse            | x  |     |                          |
| touch            | x  |     |                          |
| gamepad          | x  | ?   | maybe output for rumble? |
| audio            | x  | x   | telephony                |
| midi             | x  | x   |                          |
| network          | x  | x   |                          |
| display:text     |    | x   |                          |
| display:graphics |    | x   |                          |
